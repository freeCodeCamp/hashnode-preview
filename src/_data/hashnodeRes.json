{
  "data": {
    "publication": {
      "title": "freeCodeCamp",
      "post": {
        "id": "661fd38bd486669f99451ce9",
        "slug": "how-to-print-a-string-in-c",
        "title": "C Print String – How to Print a String in C",
        "author": {
          "id": "65e033f44dbb4a55d1fdfde5",
          "username": "dionysialemonaki",
          "name": "Dionysia Lemonaki",
          "bio": {
            "text": ""
          },
          "profilePicture": "https://cdn.hashnode.com/res/hashnode/image/upload/v1713284398578/Zpo5ssvLj.jpeg",
          "socialMediaLinks": {
            "website": "",
            "twitter": "",
            "facebook": ""
          },
          "location": ""
        },
        "tags": [
          {
            "id": "56744720958ef13879b94813",
            "name": "c programming",
            "slug": "c-programming"
          },
          {
            "id": "56744721958ef13879b9492c",
            "name": "C",
            "slug": "c"
          },
          {
            "id": "57448e2a9ade925885158cfe",
            "name": "string",
            "slug": "string"
          }
        ],
        "coverImage": {
          "url": "https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/Hcfwew744z4/upload/73cd11d4c62fcaa9d6fa85514d7cb732.jpeg"
        },
        "brief": "Printing strings is a fundamental operation in programming. It helps you output information, inspect and debug your code, and display prompts to users.\nIn this article, you will learn some of the different techniques to print strings in C.\nWhat is a ...",
        "readTimeInMinutes": 5,
        "content": {
          "html": "<p>Printing strings is a fundamental operation in programming. It helps you output information, inspect and debug your code, and display prompts to users.</p>\n<p>In this article, you will learn some of the different techniques to print strings in C.</p>\n<h2 id=\"heading-what-is-a-string-in-c\">What is a String in C?</h2>\n<p>A string is a sequence of characters, like letters, numbers, or symbols, that are grouped together. It is used to represent text in programs.</p>\n<p>Strings are not a built-in data type in C. Instead, they are represented as arrays of characters, terminated with a special character called the null terminator, <code>\\0</code>.</p>\n<p>Here is an example of how to create a string in C:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">char</span> greeting[] = <span class=\"hljs-string\">\"Hello world!\"</span>;\n</code></pre>\n<p>In the code above, I declared a character array named <code>greeting</code>, and initialized it with the string <code>Hello world!</code> enclosed within double quotes, <code>\" \"</code>.</p>\n<p>The C compiler automatically includes the null terminator, <code>\\0</code>, at the end of <code>Hello world!</code>.</p>\n<h2 id=\"heading-how-to-print-a-string-in-c-using-the-printf-function\">How to Print a String in C Using the <code>printf()</code> Function</h2>\n<p>The <code>printf()</code> function is one of the most commonly used ways of printing strings in C.</p>\n<p>It stands for \"print formatted\", and belongs to the standard input/output library, <code>stdio.h</code>. So, in order to use it, you need to first include the <code>stdio.h</code> header file at the beginning of your program.</p>\n<p>Let’s take the following example:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n  <span class=\"hljs-keyword\">char</span> greeting[] = <span class=\"hljs-string\">\"Hello world!\"</span>;\n\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\\n\"</span>, greeting);\n}\n\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Hello world!</span>\n</code></pre>\n<p>In the example above, I first included the <code>stdio.h</code> header file at the beginning of my program, which contains the declaration of the <code>printf()</code> function.</p>\n<p>Next, I declared a character array named <code>greeting</code> and initialized it with the text <code>Hello world!</code> wrapped in double quotes.</p>\n<p>Lastly, I used the <code>printf()</code> function to print the text <code>Hello world!</code>.</p>\n<p>When printing a string using the <code>printf()</code> function, you need to use a format specifier.</p>\n<p>A format specifier acts as a placeholder that tells the <code>printf()</code> function how to format and print specific types of data. They begin with a percent sign <code>%</code>, followed by a character that specifies the type of data to be formatted. The format specifier for strings is <code>%s</code>.</p>\n<p>So, in the line <code>printf(\"%s\\n\", greeting);</code>, the <code>%s</code> format specifier tells <code>printf()</code> to print the string stored in the <code>greeting</code> variable followed by a newline character, <code>\\n</code>.</p>\n<p>Note that the <code>%s</code> format specifier doesn’t include the null terminator, <code>\\0,</code> when printing strings. It prints the characters in the string until it encounters it.</p>\n<h2 id=\"heading-how-to-print-a-string-in-c-using-the-puts-function\">How to Print a String in C Using the <code>puts()</code> Function</h2>\n<p>Another function used for printing strings is <code>puts()</code>.</p>\n<p>Let’s take the following example:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n  <span class=\"hljs-keyword\">char</span> greeting[] = <span class=\"hljs-string\">\"Hello world!\"</span>;\n\n  <span class=\"hljs-built_in\">puts</span>(greeting);\n}\n\n<span class=\"hljs-comment\">// Output</span>\n<span class=\"hljs-comment\">// Hello world!</span>\n</code></pre>\n<p>In the example above, I first included the <code>stdio.h</code> header file which contains the <code>puts()</code> declaration.</p>\n<p>Then, I declared a character array and initialized it with the text <code>Hello world!</code>. The string automatically ends with the null terminator, <code>\\0</code>.</p>\n<p>Lastly, I used the <code>puts()</code> function to print the string to the console and passed the string variable <code>greeting</code> as an argument.</p>\n<p>The <code>puts()</code> function automatically adds a newline character, <code>\\n</code>, at the end of the string.</p>\n<p>Note that the <code>puts()</code> function is used to print null-terminated strings. A null-terminated string is a sequence of characters stored in memory followed by a character called the null terminator <code>\\0</code>.</p>\n<p>So far, all the examples have used only null-terminated strings, such as <code>char greeting[] = \"Hello world!\";</code>. In memory, it would be represented as <code>['H', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd', '!', '\\0']</code>.</p>\n<p>Creating non-null-terminated strings intentionally is not common in C.</p>\n<p>Here is an example of a non-null-terminated string: <code>char greeting[] = {'H', 'e', 'l', 'l', 'o'};</code>This array of characters does not include the null terminator, <code>\\0</code>, so it is a non-null-terminated string.</p>\n<p>If you try to print a non-null-terminated string using <code>puts()</code>, you will end up getting undefined behavior, such as garbage characters at the end of the string:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n  <span class=\"hljs-keyword\">char</span> greeting[] = {<span class=\"hljs-string\">'H'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'o'</span>};\n\n  <span class=\"hljs-built_in\">puts</span>(greeting);\n}\n\n<span class=\"hljs-comment\">// Ouput when I run the code the first time:</span>\n<span class=\"hljs-comment\">// Helloq</span>\n\n<span class=\"hljs-comment\">// Ouput when I run the code a second time:</span>\n<span class=\"hljs-comment\">// Hellop</span>\n\n<span class=\"hljs-comment\">// Ouput when I run the code a thrid time:</span>\n<span class=\"hljs-comment\">// Hellow</span>\n</code></pre>\n<h2 id=\"heading-the-printf-function-vs-the-puts-function-whats-the-difference\">The <code>printf()</code> Function VS the <code>puts()</code> Function – What's the Difference?</h2>\n<p>You may be wondering what the difference is between <code>printf()</code> and <code>puts()</code>.</p>\n<p>The <code>puts()</code> function prints the text as it is, without any formatting. It also automatically adds a newline character at the end of the string.</p>\n<p>The <code>printf()</code> function doesn’t automatically add a new line - you have to do it explicitly.</p>\n<p>However, it allows for formatted output, and gives you more control and flexibility over where and how you insert different data types into the format string:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n    <span class=\"hljs-keyword\">char</span> name[] = <span class=\"hljs-string\">\"John\"</span>;\n    <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">30</span>;\n\n    <span class=\"hljs-comment\">// Printing strings using puts()</span>\n    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">\"Using puts():\"</span>);\n    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">\"My name is John and I'm 30 years old.\"</span>);\n\n    <span class=\"hljs-comment\">// Printing strings usingprintf()</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\nUsing printf():\\n\"</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"My name is %s and I'm %d years old. \\n\"</span>, name, age);\n}\n</code></pre>\n<p>In the example above, the <code>puts()</code> function prints a simple string without any formatting. It also automatically adds a newline character, <code>\\n</code>, at the end of the string.</p>\n<p>On the other hand, the <code>printf()</code> function formats the string and embeds two variable values. It uses format specifiers, such as <code>%s</code> for strings and <code>%d</code> for integers, to specify the type of data the variables hold, and where the variables should be inserted into the string. It also adds a newline character at the end.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>In this article, you learned about the two most commonly used functions in C for printing strings.</p>\n<p>The <code>printf()</code> function is commonly used for printing formatted text to the console. It allows you to format your output and print strings, numbers and characters.</p>\n<p>The <code>puts()</code> function is more simple compared to <code>printf()</code>. It is great for basic text output and automatically adds a newline character, <code>\\n</code>, to the printed string.</p>\n<p>Thank you for reading, and happy coding!</p>\n"
        },
        "publishedAt": "2024-04-17T13:50:03.705Z",
        "updatedAt": null
      }
    }
  }
}
